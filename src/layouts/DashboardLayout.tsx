import React, { useState, useEffect } from 'react';
import { Outlet, useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import type { RootState } from '../store/store';
import { RouteRegistry } from '../routing/RouteRegistry';
import { useLogoutMutation } from '../api/authApi';
import { useTheme } from '../providers/ThemeProvider';
import { useNotify } from '../hooks/useNotify';
import { extractErrorMessage } from '../utils/extractErrorMessage';
import css from './DashboardLayout.module.css';

import { Topbar } from '../shared/components/Pagination/Topbar/Topbar';
import { Sidebar } from '../shared/components/Pagination/Sidebar/Sidebar';
import { InviteModal } from '../shared/components/InviteModal/InviteModal';

export const DashboardLayout: React.FC = () => {
  const user = useSelector((state: RootState) => state.auth.user);
  const [logout] = useLogoutMutation();
  const { theme, toggleTheme } = useTheme();
  const { success, error: notifyError } = useNotify();
  const navigate = useNavigate();
  const navigableRoutes = RouteRegistry.getNavigableRoutes();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(() => {
    const saved = localStorage.getItem('sidebarCollapsed');
    return saved ? JSON.parse(saved) : false;
  });

  const [isChatOpen, _] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
  const [pendingInviteCode, setPendingInviteCode] = useState<string | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ invite code –≤ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const inviteCode = localStorage.getItem('pendingInviteCode');
    if (inviteCode && user) {
      setPendingInviteCode(inviteCode);
    }
  }, [user]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
  useEffect(() => {
    localStorage.setItem('sidebarCollapsed', JSON.stringify(isSidebarCollapsed));
  }, [isSidebarCollapsed]);

  const handleLogout = async () => {
    try {
      window.dispatchEvent(new Event('logout'));
      await logout().unwrap();
      success({ title: '–î–æ –≤—Å—Ç—Ä–µ—á–∏ üëã', text: '–ñ–¥—ë–º —Ç–µ–±—è —Å–Ω–æ–≤–∞' });
    } catch (error) {
      console.error('Logout error:', error);
      notifyError({ title: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏', text: extractErrorMessage(error, '–ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ') });
    }
  };

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  const handleAcceptInvite = async () => {
    try {
      // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ
      success({ title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É! üéâ', text: '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ' });
      localStorage.removeItem('pendingInviteCode');
      setPendingInviteCode(null);
      // –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
      navigate('/teams');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      notifyError({ title: '–û—à–∏–±–∫–∞', text: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ' });
    }
  };

  const handleDeclineInvite = () => {
    localStorage.removeItem('pendingInviteCode');
    setPendingInviteCode(null);
    success({ title: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', text: '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ–∑–∂–µ' });
  };

  const handleCloseInviteModal = () => {
    localStorage.removeItem('pendingInviteCode');
    setPendingInviteCode(null);
  };

  return (
    <div className={css.container}>
      {/* Sidebar - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–µ–≤–∞ */}

      <Sidebar
        routes={navigableRoutes}
        onLogout={handleLogout}
        isCollapsed={isSidebarCollapsed}
        onToggleCollapse={toggleSidebar}
      />

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className={css.mainWrapper}>
        {/* Topbar - –≤–≤–µ—Ä—Ö—É –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ */}
        <Topbar
          userName={user?.name}
          theme={theme}
          onToggleTheme={toggleTheme}
          onLogout={handleLogout}
          isSidebarCollapsed={isSidebarCollapsed}
          routes={navigableRoutes}
        />

        {/* –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —á–∞—Ç–∞ */}
        <div className={`${css.contentArea} ${isChatOpen ? css.chatActive : ''}`}>
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <main className={css.main}>
            <div className={css.content}>
              {/* <span onClick={() => setIsChatOpen(true)}>lol</span> */}
              <Outlet />
            </div>
          </main>

          {/* –°–µ–∫—Ü–∏—è —á–∞—Ç–∞ */}
          <aside className={`${css.chatSection} ${isChatOpen ? css.active : ''}`}>
            {/* –ß–∞—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å */}
            {/* –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å –∫–Ω–æ–ø–∫—É toggleChat –∏ –≤—ã–∑—ã–≤–∞–π setIsChatOpen(!isChatOpen) */}
          </aside>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
      {pendingInviteCode && (
        <InviteModal
          inviteCode={pendingInviteCode}
          onAccept={handleAcceptInvite}
          onDecline={handleDeclineInvite}
          onClose={handleCloseInviteModal}
        />
      )}
    </div>
  );
};
