import React, { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { Sparkles, UserCheck, Check, Loader2 } from 'lucide-react';
import { useCheckAvailabilityMutation, useSendVerificationCodeMutation } from '../../../../api/authApi';
import { useDebounce } from '../../../../hooks/useDebounce';
import { useNotify } from '../../../../hooks/useNotify';
import { setPendingRegistrationEmail, setPendingRegistrationData } from '../../../../store/slices/createTeamSlice';
import css from '../../pages/CreateTeam/CreateTeam.module.css';

interface RegistrationStepProps {
  onEmailVerificationRequired: () => void;
}

export const RegistrationStep: React.FC<RegistrationStepProps> = ({ onEmailVerificationRequired }) => {
  const dispatch = useDispatch();
  const [searchParams] = useSearchParams();
  const inviteCodeFromUrl = searchParams.get('JoinInvite');

  const [formData, setFormData] = useState({
    email: '',
    username: '',
    password: '',
    confirmPassword: '',
    name: '',
  });
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [usernameStatus, setUsernameStatus] = useState<'checking' | 'available' | 'taken' | null>(null);
  const [emailStatus, setEmailStatus] = useState<'checking' | 'available' | 'taken' | null>(null);
  const [nameValid, setNameValid] = useState(false);
  const [passwordValid, setPasswordValid] = useState(false);
  const [confirmPasswordValid, setConfirmPasswordValid] = useState(false);

  const debouncedUsername = useDebounce(formData.username, 500);
  const debouncedEmail = useDebounce(formData.email, 500);
  const { success, error } = useNotify();
  const [checkAvailability] = useCheckAvailabilityMutation();
  const [sendVerificationCode] = useSendVerificationCodeMutation();
  const [isRegistering, setIsRegistering] = useState(false);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º invite code –≤ localStorage –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ URL
  useEffect(() => {
    if (inviteCodeFromUrl) {
      localStorage.setItem('pendingInviteCode', inviteCodeFromUrl);
    }
  }, [inviteCodeFromUrl]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ username —Å debounce
  useEffect(() => {
    if (debouncedUsername && debouncedUsername.length >= 3) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username –ø–µ—Ä–µ–¥ API –∑–∞–ø—Ä–æ—Å–æ–º
      if (!/^[a-zA-Z0-9_-]+$/.test(debouncedUsername)) {
        setUsernameStatus('taken'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return;
      }
      if (debouncedUsername.length > 20) {
        setUsernameStatus('taken');
        return;
      }
      checkUsernameAvailability(debouncedUsername);
    } else {
      setUsernameStatus(null);
    }
  }, [debouncedUsername]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ email —Å debounce
  useEffect(() => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (debouncedEmail && emailRegex.test(debouncedEmail)) {
      // Email —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      checkEmailAvailability(debouncedEmail);
    } else {
      // Email —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π
      setEmailStatus(null);
    }
  }, [debouncedEmail]);

  const checkUsernameAvailability = async (username: string) => {
    setUsernameStatus('checking');
    try {
      const response = await checkAvailability({ username }).unwrap();
      setUsernameStatus(response.username?.available ? 'available' : 'taken');
    } catch (error) {
      setUsernameStatus('taken');
    }
  };

  const checkEmailAvailability = async (email: string) => {
    setEmailStatus('checking');
    try {
      const response = await checkAvailability({ email }).unwrap();
      setEmailStatus(response.email?.available ? 'available' : 'taken');
    } catch (error) {
      setEmailStatus('taken');
    }
  };

  const validateForm = () => {
    const errors: Record<string, string> = {};

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      errors.email = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    } else if (emailStatus === 'taken') {
      errors.email = '–≠—Ç–æ—Ç email —É–∂–µ –∑–∞–Ω—è—Ç';
    }

    if (formData.username.length < 3) {
      errors.username = 'Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    } else if (formData.username.length > 20) {
      errors.username = 'Username –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤';
    } else if (!/^[a-zA-Z0-9_-]+$/.test(formData.username)) {
      errors.username = 'Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -';
    } else if (usernameStatus === 'taken') {
      errors.username = '–≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç';
    }

    if (formData.password.length < 8) {
      errors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤';
    } else if (formData.password.length > 32) {
      errors.password = '–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞';
    } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/.test(formData.password)) {
      errors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã';
    }

    if (formData.password !== formData.confirmPassword) {
      errors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
    }

    if (formData.name.length < 2) {
      errors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    } else if (formData.name.length > 50) {
      errors.name = '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const newFormData = { ...formData, [name]: value };
    setFormData(newFormData);

    if (validationErrors[name]) {
      setValidationErrors(prev => ({ ...prev, [name]: '' }));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (name === 'name') {
      setNameValid(value.length >= 2 && value.length <= 50);
    } else if (name === 'password') {
      const isValid = value.length >= 8 && value.length <= 32 &&
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/.test(value);
      setPasswordValid(isValid);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è
      setConfirmPasswordValid(newFormData.confirmPassword === value && newFormData.confirmPassword !== '');
    } else if (name === 'confirmPassword') {
      setConfirmPasswordValid(value === newFormData.password && value !== '');
    }
  };

  const handleRegistration = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm() || usernameStatus !== 'available' || emailStatus !== 'available') {
      error({ title: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', text: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π' });
      return;
    }

    const inviteCode = localStorage.getItem('pendingInviteCode');
    setIsRegistering(true);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await sendVerificationCode({ email: formData.email }).unwrap();

      success({ title: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üìß', text: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      dispatch(setPendingRegistrationEmail(formData.email));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      dispatch(setPendingRegistrationData({
        email: formData.email,
        username: formData.username,
        password: formData.password,
        name: formData.name,
        inviteCode
      }));

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
      setTimeout(() => {
        onEmailVerificationRequired();
      }, 1000);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      error({
        title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        text: error?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
    } finally {
      setIsRegistering(false);
    }
  };

  const renderFieldStatus = (status: 'checking' | 'available' | 'taken' | null, field: string) => {
    if (!status) return null;

    switch (status) {
      case 'checking':
        return (
          <div className={css.fieldStatus}>
            <Loader2 size={16} className={css.spinIcon} />
            <span className={css.statusText}>–ü—Ä–æ–≤–µ—Ä—è–µ–º...</span>
          </div>
        );
      case 'available':
        return (
          <div className={css.fieldStatus}>
            <Check size={16} className={css.successIcon} />
            <span className={css.successText}>
              {field === 'username' ? 'Username –¥–æ—Å—Ç—É–ø–µ–Ω' : 'Email –¥–æ—Å—Ç—É–ø–µ–Ω'}
            </span>
          </div>
        );
      case 'taken':
        return (
          <div className={css.fieldStatus}>
            <span className={css.errorText}>
              {field === 'username' ? '‚úó Username —É–∂–µ –∑–∞–Ω—è—Ç' : '‚úó Email —É–∂–µ –∑–∞–Ω—è—Ç'}
            </span>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className={css.stepContainer}>
      <div className={css.header}>
        <div className={css.iconWrapper}>
          <Sparkles size={32} color="white" />
        </div>
        <h1 className={css.title}>
          {inviteCodeFromUrl ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ' : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'}
        </h1>
        <p className={css.subtitle}>
          {inviteCodeFromUrl
            ? '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ'
            : '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π'
          }
        </p>
      </div>

      <form onSubmit={handleRegistration} className={css.form}>
        <div className={css.inputGroup}>
          <label htmlFor="name" className={css.label}>–ò–º—è</label>
          <div className={css.inputWrapper}>
            <input
              id="name"
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–í–∞—à–µ –∏–º—è"
              required
              className={`${css.input} ${nameValid ? css.inputSuccess : ''}`}
            />
            {nameValid && (
              <Check size={20} className={css.inputIcon} />
            )}
          </div>
          {validationErrors.name && (
            <span className={css.error}>{validationErrors.name}</span>
          )}
        </div>

        <div className={css.inputGroup}>
          <label htmlFor="username" className={css.label}>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
          <div className={css.inputWrapper}>
            <input
              id="username"
              type="text"
              name="username"
              value={formData.username}
              onChange={handleChange}
              placeholder="username"
              required
              className={`${css.input} ${usernameStatus === 'available' ? css.inputSuccess : usernameStatus === 'taken' ? css.inputError : ''}`}
            />
            {usernameStatus === 'available' && (
              <Check size={20} className={css.inputIcon} />
            )}
          </div>
          {renderFieldStatus(usernameStatus, 'username')}
          {validationErrors.username && (
            <span className={css.error}>{validationErrors.username}</span>
          )}
        </div>

        <div className={css.inputGroup}>
          <label htmlFor="email" className={css.label}>Email</label>
          <div className={css.inputWrapper}>
            <input
              id="email"
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="–≤–∞—à@email.com"
              required
              className={`${css.input} ${emailStatus === 'available' ? css.inputSuccess : emailStatus === 'taken' ? css.inputError : ''}`}
            />
            {emailStatus === 'available' && (
              <Check size={20} className={css.inputIcon} />
            )}
          </div>
          {renderFieldStatus(emailStatus, 'email')}
          {validationErrors.email && (
            <span className={css.error}>{validationErrors.email}</span>
          )}
        </div>

        <div className={css.inputGroup}>
          <label htmlFor="password" className={css.label}>–ü–∞—Ä–æ–ª—å</label>
          <div className={css.inputWrapper}>
            <input
              id="password"
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              placeholder="–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"
              required
              className={`${css.input} ${passwordValid ? css.inputSuccess : ''}`}
            />
            {passwordValid && (
              <Check size={20} className={css.inputIcon} />
            )}
          </div>
          {validationErrors.password && (
            <span className={css.error}>{validationErrors.password}</span>
          )}
          <span className={css.hint}>
            –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
          </span>
        </div>

        <div className={css.inputGroup}>
          <label htmlFor="confirmPassword" className={css.label}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
          <div className={css.inputWrapper}>
            <input
              id="confirmPassword"
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              required
              className={`${css.input} ${confirmPasswordValid ? css.inputSuccess : ''}`}
            />
            {confirmPasswordValid && (
              <Check size={20} className={css.inputIcon} />
            )}
          </div>
          {validationErrors.confirmPassword && (
            <span className={css.error}>{validationErrors.confirmPassword}</span>
          )}
        </div>

        <div className={css.actionButtons}>
          <button
            type="submit"
            disabled={isRegistering || usernameStatus !== 'available' || emailStatus !== 'available'}
            className={css.primaryBtn}
          >
            <UserCheck size={20} />
            {isRegistering ? '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...' : (inviteCodeFromUrl ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')}
          </button>
        </div>
      </form>
    </div>
  );
};