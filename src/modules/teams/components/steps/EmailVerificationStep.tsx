import React, { useState, useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { Mail, ArrowLeft, RefreshCw, Users, User, Clock, UserPlus, X, CheckCircle } from 'lucide-react';
import { useNotify } from '../../../../hooks/useNotify';
import { useVerifyEmailCodeMutation, useSendVerificationCodeMutation, useRegisterWithInviteMutation } from '../../../../api/authApi';
import { useGetPublicInviteQuery, useAcceptInviteMutation } from '../../../../api/invitesApi';
import { setPendingRegistrationData } from '../../../../store/slices/createTeamSlice';
import { setCredentials } from '../../../../store/slices/authSlice';
import type { RootState } from '../../../../store/store';
import css from '../../pages/CreateTeam/CreateTeam.module.css';

interface EmailVerificationStepProps {
  email: string;
  onVerificationComplete: () => void;
  onBack: () => void;
}

// Helper functions to handle both old and new API formats
const getTeamTitle = (invite: any) => {
  return invite?.team?.title || invite?.teamName || '–ö–æ–º–∞–Ω–¥–∞';
};

const getTeamDescription = (invite: any) => {
  return invite?.team?.description || null;
};

const getInviterName = (invite: any) => {
  return invite?.createdBy?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã';
};

const getInviterEmail = (invite: any) => {
  return invite?.createdBy?.email || invite?.email || 'unknown@technofrog.store';
};

export const EmailVerificationStep: React.FC<EmailVerificationStepProps> = ({
  email,
  onVerificationComplete,
  onBack
}) => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const pendingRegistrationData = useSelector((state: RootState) => state.createTeam.pendingRegistrationData);

  const [code, setCode] = useState(['', '', '', '', '', '']);
  const [isLoading, setIsLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [timeLeft, setTimeLeft] = useState(60);
  const [inviteDecision, setInviteDecision] = useState<'accept' | 'reject' | null>(null);
  const [emailVerified, setEmailVerified] = useState(false);

  // Check for pending invite
  const pendingInviteCode = localStorage.getItem('pendingInviteCode');
  const { data: inviteData } = useGetPublicInviteQuery(pendingInviteCode!, {
    skip: !pendingInviteCode,
  });
  const [acceptInvite] = useAcceptInviteMutation();
  const [canResend, setCanResend] = useState(false);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);
  const { success, error } = useNotify();
  const [verifyEmailCode] = useVerifyEmailCodeMutation();
  const [sendVerificationCode] = useSendVerificationCodeMutation();
  const [registerWithInvite] = useRegisterWithInviteMutation();

  // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  useEffect(() => {
    if (timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else {
      setCanResend(true);
    }
  }, [timeLeft]);

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    inputRefs.current[0]?.focus();
  }, []);

  const handleInputChange = (index: number, value: string) => {
    if (!/^\d*$/.test(value)) return; // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã

    const newCode = [...code];
    newCode[index] = value;
    setCode(newCode);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
    if (value && index < 5) {
      inputRefs.current[index + 1]?.focus();
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π
    if (newCode.every(digit => digit !== '') && !isLoading) {
      verifyCode(newCode.join(''));
    }
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === 'Backspace' && !code[index] && index > 0) {
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª–µ –ø—Ä–∏ Backspace
      inputRefs.current[index - 1]?.focus();
    } else if (e.key === 'ArrowLeft' && index > 0) {
      inputRefs.current[index - 1]?.focus();
    } else if (e.key === 'ArrowRight' && index < 5) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text').replace(/\D/g, '').slice(0, 6);
    const newCode = [...code];

    for (let i = 0; i < pastedData.length; i++) {
      newCode[i] = pastedData[i];
    }

    setCode(newCode);

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
    const lastFilledIndex = Math.min(pastedData.length - 1, 5);
    inputRefs.current[lastFilledIndex]?.focus();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (pastedData.length === 6) {
      verifyCode(pastedData);
    }
  };


  const verifyCode = async (codeString: string) => {
    setIsLoading(true);
    try {
      // –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–¥–∞
      await verifyEmailCode({ email, code: codeString }).unwrap();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–∞–ª–æ—á–∫—É
      setEmailVerified(true);
      setIsLoading(false);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      if (inviteData && inviteDecision === null) {
        return; // –ñ–¥–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }

      // –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø: –µ—Å–ª–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      if (pendingRegistrationData) {
        const registrationResponse = await registerWithInvite(pendingRegistrationData).unwrap();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        dispatch(setCredentials({
          user: registrationResponse.user,
          accessToken: registrationResponse.accessToken,
          refreshToken: registrationResponse.refreshToken
        }));

        // –û—á–∏—â–∞–µ–º pending data
        dispatch(setPendingRegistrationData(null));

        // –û—á–∏—â–∞–µ–º invite code –µ—Å–ª–∏ –æ–Ω –±—ã–ª
        localStorage.removeItem('pendingInviteCode');

        success({ title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ', text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TechnoFrog CRM!' });

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ –∏–Ω–≤–∞–π—Ç—É, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–∞—à–±–æ—Ä–¥
        if (registrationResponse.user.joinedTeam) {
          setTimeout(() => {
            navigate('/dashboard');
          }, 1500);
        } else {
          // –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
          setTimeout(() => {
            onVerificationComplete();
          }, 1000);
        }
      } else {
        error({ title: '–û—à–∏–±–∫–∞', text: '–î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
      }
    } catch (err: any) {
      console.error('Registration error:', err);
      const errorMessage = typeof err?.data?.message === 'string'
        ? err.data.message
        : err?.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞';

      error({
        title: '–û—à–∏–±–∫–∞',
        text: errorMessage
      });
      setCode(['', '', '', '', '', '']);
      setEmailVerified(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      inputRefs.current[0]?.focus();
    } finally {
      setIsLoading(false);
    }
  };

  const resendCode = async () => {
    setIsResending(true);
    try {
      await sendVerificationCode({ email }).unwrap();

      success({ title: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', text: '–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É' });
      setTimeLeft(60);
      setCanResend(false);
      setCode(['', '', '', '', '', '']);
      setEmailVerified(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      inputRefs.current[0]?.focus();
    } catch (err: any) {
      error({
        title: '–û—à–∏–±–∫–∞',
        text: err?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
    } finally {
      setIsResending(false);
    }
  };

  const handleInviteDecision = (decision: 'accept' | 'reject') => {
    setInviteDecision(decision);
    if (decision === 'reject') {
      localStorage.removeItem('pendingInviteCode');
    }
  };

  const continueAfterInviteDecision = async () => {
    if (!pendingRegistrationData) return;

    setIsLoading(true);
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
      const registrationResponse = await registerWithInvite(pendingRegistrationData).unwrap();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      dispatch(setCredentials({
        user: registrationResponse.user,
        accessToken: registrationResponse.accessToken,
        refreshToken: registrationResponse.refreshToken
      }));

      // –ü–û–°–õ–ï –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–∏–Ω—è—Ç—å
      if (inviteDecision === 'accept' && pendingInviteCode) {
        try {
          await acceptInvite(pendingInviteCode).unwrap();
          success({
            title: '–£—Å–ø–µ—à–Ω–æ! üéâ',
            text: `–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ "${getTeamTitle(inviteData)}"`
          });
        } catch (inviteErr: any) {
          console.error('Failed to accept invite after registration:', inviteErr);
          // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
          success({ title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ', text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TechnoFrog CRM!' });
          error({
            title: '–û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
            text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'
          });
        }
      } else {
        success({ title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ', text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TechnoFrog CRM!' });
      }

      // –û—á–∏—â–∞–µ–º pending data
      dispatch(setPendingRegistrationData(null));
      localStorage.removeItem('pendingInviteCode');

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      if (inviteDecision === 'accept') {
        setTimeout(() => navigate('/teams'), 1500);
      } else {
        setTimeout(() => onVerificationComplete(), 1000);
      }
    } catch (err: any) {
      console.error('Registration error:', err);
      const errorMessage = typeof err?.data?.message === 'string'
        ? err.data.message
        : typeof err?.message === 'string'
          ? err.message
          : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      error({
        title: '–û—à–∏–±–∫–∞',
        text: errorMessage
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={css.stepContainer}>
      <button className={css.backBtn} onClick={onBack}>
        <ArrowLeft size={20} />
        –ù–∞–∑–∞–¥
      </button>

      {!emailVerified && <div className={css.header}>
        <div className={css.iconWrapper}>
          <Mail size={32} color="white" />
        </div>
        <h1 className={css.title}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email</h1>
        <p className={css.subtitle}>
          –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ <strong>{email}</strong>
        </p>
      </div>}

      <div className={css.verificationForm}>

        {!emailVerified && <div className={css.codeInputs} onPaste={handlePaste}>
          {code.map((digit, index) => (
            <input
              key={index}
              ref={el => { inputRefs.current[index] = el; }}
              type="text"
              inputMode="numeric"
              maxLength={1}
              value={digit}
              onChange={e => handleInputChange(index, e.target.value)}
              onKeyDown={e => handleKeyDown(index, e)}
              className={css.codeInput}
              disabled={isLoading}
            />
          ))}
        </div>}

        {isLoading && (
          <div className={css.loadingState}>
            <div className={css.spinner}></div>
            <span>–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥...</span>
          </div>
        )}

        {emailVerified && (
          <div className={css.verificationSuccess}>
            <div className={css.checkmarkWrapper}>
              <CheckCircle size={48} className={css.checkmarkIcon} />
            </div>
            <div className={css.successMessage}>
              <h3>Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</h3>
              <p>–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</p>
            </div>
          </div>
        )}

        {!emailVerified && <div className={css.resendSection}>
          {!canResend ? (
            <p className={css.timerText}>
              –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {timeLeft} —Å–µ–∫
            </p>
          ) : (
            <button
              type="button"
              onClick={resendCode}
              disabled={isResending}
              className={css.resendBtn}
            >
              <RefreshCw size={16} className={isResending ? css.spinning : ''} />
              {isResending ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑'}
            </button>
          )}
        </div>}

        {!emailVerified && <div className={css.helpText}>
          <p>–ù–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑</p>
        </div>}
      </div>

      {/* Show invite information if there's a pending invite and email is verified */}
      {inviteData && inviteDecision === null && !isLoading && code.every(digit => digit !== '') && (
        <div className={css.inviteSection}>
          <div className={css.inviteHeader}>
            <div className={css.inviteIcon}>
              <UserPlus size={32} />
            </div>
            <h2>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É</h2>
            <p>Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —Ä–µ—à–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ.</p>
          </div>

          <div className={css.inviteCard}>
            <div className={css.teamInfo}>
              <div className={css.teamHeader}>
                <Users size={24} />
                <div>
                  <h3>{getTeamTitle(inviteData)}</h3>
                  {getTeamDescription(inviteData) && (
                    <p className={css.teamDescription}>{getTeamDescription(inviteData)}</p>
                  )}
                </div>
              </div>
            </div>

            <div className={css.inviteDetails}>
              <div className={css.inviterInfo}>
                <User size={20} />
                <div>
                  <span className={css.label}>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç:</span>
                  <span className={css.inviterName}>{getInviterName(inviteData)}</span>
                  <span className={css.inviterEmail}>({getInviterEmail(inviteData)})</span>
                </div>
              </div>

              <div className={css.roleInfo}>
                <span className={css.label}>–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ:</span>
                <span className={css.role}>{inviteData.role}</span>
              </div>

              {inviteData.note && (
                <div className={css.noteInfo}>
                  <span className={css.label}>–°–æ–æ–±—â–µ–Ω–∏–µ:</span>
                  <p className={css.note}>{inviteData.note}</p>
                </div>
              )}

              {inviteData.expiresAt && (
                <div className={css.expiryInfo}>
                  <Clock size={16} />
                  <span>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new Date(inviteData.expiresAt).toLocaleDateString('ru-RU')}</span>
                </div>
              )}
            </div>

            <div className={css.inviteActions}>
              <button
                onClick={() => handleInviteDecision('reject')}
                className={css.rejectBtn}
                disabled={isLoading}
              >
                <X size={16} />
                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
              </button>
              <button
                onClick={() => handleInviteDecision('accept')}
                className={css.acceptBtn}
                disabled={isLoading}
              >
                <UserPlus size={16} />
                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Show continue button after invite decision */}
      {inviteData && inviteDecision !== null && (
        <div className={css.continueSection}>
          <div className={css.decisionStatus}>
            {inviteDecision === 'accept' ? (
              <div className={css.acceptedStatus}>
                <UserPlus size={24} />
                <span>–í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ "{getTeamTitle(inviteData)}"</span>
              </div>
            ) : (
              <div className={css.rejectedStatus}>
                <X size={24} />
                <span>–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</span>
              </div>
            )}
          </div>
          <button
            onClick={continueAfterInviteDecision}
            className={css.continueBtn}
            disabled={isLoading}
          >
            {isLoading ? '–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'}
          </button>
        </div>
      )}
    </div>
  );
};